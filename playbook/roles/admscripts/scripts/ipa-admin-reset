#!/usr/bin/env bash


# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([option])
# ARG_OPTIONAL_BOOLEAN([print])
# ARG_POSITIONAL_SINGLE([positional-arg])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

export LDAPTLS_CACERT=/etc/ipa/ca.crt

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_positionals_count=0
_arg_positional_arg=

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_option=
_arg_print="off"

# Comand variables
_instance_name=''
_option_='h'
_password_manager_='manager123'
_password_admin_='admin123'

print_help()
{
	printf '%s\n' "Script para virificar los directorys, asi como para resetear el password del Direcotry Manager y Admin para IPA "
	printf 'Usage: %s  [-u directory] <-p password_ipa_admin> <-P password_directory_manager>  [-aidlh] \n' "$0"
	printf '\t%s\n' "-h: Imprime ayuda"
	printf '\t%s\n' "-u: Nombre del directory services,opcion requerida para realizar cualquier cambio"
	printf '\t%s\n' "-a: Reinicio del password de directory a valor default y creacion de nuevo password para admin"
	printf '\t%s\n' "-i: Creacion de un nuevo password para IPA admin (requiere conocer el password del Directory manager)"
	printf '\t%s\n' "-d: Reinicio del password de Directory Manager"
	printf '\t%s\n' "-p: Password de Admin de ipa. Si se usa en convinacion con -i se colocara como nuevo password. Por default se usa admin123"
	printf '\t%s\n' "-P: Password de root de directory 389. Si se usa en convinacion con -p se colocara como nuevo password. Por default se usa manager123"
	#printf '\t%s\n' "-D: Colocar un nuevo password para el Directory Manager (requiere saber el password de root del DM)"
	printf '\t%s\n' "-l: Lista de Derectory services activos"
}

check_l()
{
	[[ $_option_ == 'l' ]]&&_positionals_count=100
}

parse_commandline()
{

	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				check_l
				_option_='h'
				_positionals_count=1
				;;
			-h*)
				check_l
				_option_='h'
				_positionals_count=1
				;;
			-a)
        check_l
				_option_='a'
				_positionals_count=$((_positionals_count + 1))
				;;
			-i)
				_option_='i'
				_positionals_count=$((_positionals_count + 1))
				;;
			-d)
				_option_='d'
				;;
			-l)
				_option_='l'
				[[ $_positionals_count != '0' ]]&&_positionals_count=100000 ||	_positionals_count=$((_positionals_count + 1))
				;;
			-u)
				[[ $(echo "$2" | grep -Ec "\-i|\-a|\-h|\-d|\-l") != 0 ]]&&_positionals_count=100000 || _instance_name=$2
				;;
			-p)
				[[ $(echo "$2" | grep -Ec "\-i|\-a|\-h|\-d|\-l") != 0 ]]&&_positionals_count=100000 || _password_admin_=$2
				;;
			-P)
				[[ $(echo "$2" | grep -Ec "\-i|\-a|\-h|\-d|\-l") != 0 ]]&&_positionals_count=100000 || _password_manager_=$2
				;;
			*)
				_last_positional="$1"
				[[ $(echo $1 | grep -c "^-") == 0 ]]&&_option_='error'
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'positional-arg'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough arguments - we require at least 1." 1
	test "${_positionals_count}" -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious  arguments --- we expect 1 or 2. " 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_positional_arg "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

ipa_admin(){
	if [[ $_instance_name == '' ]];then
		print_help
	else
			_comando_=""
			for i in $(seq 1 $(echo "$_instance_name" | awk -F\- '{print NF}') );do _dc_=$(echo $_instance_name | awk -F\- -v i=$i '{print $i}'); _comando_="$_comando_,dc=$_dc_" ;done
			echo "Estableciendo nueva contraseña para IPA Admin"
			#ldappasswd -ZZ -D 'cn=directory manager' -W -S uid=admin,cn=users,cn=accounts$_comando_ -H ldap://localhost:389
			ldappasswd -ZZ -D 'cn=directory manager'  uid=admin,cn=users,cn=accounts$_comando_ -H ldap://localhost:389 -w $_password_manager_ -s $_password_admin_
	fi
}

directory_manager(){
	if [[ $_instance_name == '' ]];then
		print_help
	else
		  echo "Estableciendo nueva contraseña para Directory Manager"
			cryp=$(grep "nsslapd-rootpw" /etc/dirsrv/slapd-$_instance_name/dse.ldif |sed 's/.*{\(.*\)}.*/ \1 /g' )
      [[ $(echo $cryp | grep -c "_") != '0' ]] && cryp=$(echo "$cryp" |awk -F_ '{print $2}')
			tmp=$(/usr/bin/pwdhash -s $cryp $_password_manager_)
			#dsctl $_instance_name stop en versiones mas actuales
      systemctl stop dirsrv@$_instance_name
			_password="nsslapd-rootpw: $tmp"
			bkpfile /etc/dirsrv/slapd-$_instance_name/dse.ldif
			sed -i "s|nsslapd-rootpw: |nsslapd-rootpw: \n#nsslapd-rootpw: |g"	/etc/dirsrv/slapd-$_instance_name/dse.ldif
			sed -i "s|nsslapd-rootpw: |$_password|g"	/etc/dirsrv/slapd-$_instance_name/dse.ldif
      #dsctl $_instance_name start
      systemctl start dirsrv@$_instance_name
	fi
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



if [ $_option_ == 'l' ];then
	echo "Los directorys activos:"
	systemctl --type=service | grep dirsrv | sed 's/dirsrv@\(.*\)\.service/\1/g'
elif [[ $_option_ == 'a' ]]; then
	directory_manager
	ipa_admin
elif [[ $_option_ == 'i' ]]; then
	ipa_admin
elif [[ $_option_ == 'd' ]]; then
	directory_manager
elif [ $_option_ == 'h' ]; then
	print_help
elif [[ $_option_ == 'error' ]]; then
	print_help
fi

#printf 'Value of --%s: %s\n' 'option' "$_arg_option"
#printf "'%s' is %s\\n" 'print' "$_arg_print"
#printf "Value of '%s': %s\\n" 'positional-arg' "$_arg_positional_arg"

# ] <-- needed because of Argbash
